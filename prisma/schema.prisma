// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema


//FK -> User
// variavel Model(nome da tabela mas no singular) relação(FK, PK, ação)
//ex: clientId Int @map("client_id")
// client User @relation(fields: [clientId], references: [id], onDelete: Cascade)

// quem carrega o 1 tem o vetor
// habits Habit []

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

//Eduardo Coppi
model User {

  id Int @id @default(autoincrement()) 

  name String
  lastName String @map("last_name")
  password String
  cpf String @unique
  phone String
  email String @unique
  role Role

  createdAt DateTime  @map("created_at") @default(now())
  updatedAt DateTime @map("update_at") @updatedAt

  movements Movement[] 
  
  @@map("users")
}

enum Role {
  RECEPCIONIST
  TRIAGE
  DOCTOR
  NURSE
  PHARMACY
}

//Eduardo Coppi
model Patient {
  id Int @id @default( autoincrement() )
  name String
  lastName String @map("last_name")
  birth DateTime
  cpf String @unique
  email String @unique
  phone String
  address String
  allergyDescription String @map("allergy_description")

  createdAt DateTime @map("created_at") @default( now() )
  updatedAt DateTime @map("updated_at") @updatedAt

  records Record[] 
  
  @@map("patients")
}

model Record {
  id Int @id @default( autoincrement() )
  patientId Int @map("patient_id")
  appointmentDate DateTime @map("appointment_date")
  createdAt DateTime @map("created_at") @default( now() )
  updatedAt DateTime @map("updated_at") @updatedAt

  patient Patient @relation(fields: [patientId], references: [id])

  exam Exam?
  prescription Prescription?

  @@map("records")
}


model Exam {
  id Int @id @default( autoincrement() )
  recordId Int @map("record_id") @unique
  date DateTime
  type String
  result String
  observation String

  createdAt DateTime @map("created_at") @default( now() )
  updatedAt DateTime @map("updated_at") @updatedAt

  record Record @relation(fields: [recordId], references: [id])

  @@map("exams")
}


model Prescription {
  id Int @id @default( autoincrement() )
  recordId Int @map("record_id") @unique
  medicationId Int @map("medication_id") 
  quantity Int

  createdAt DateTime @map("created_at") @default( now() )
  updatedAt DateTime @map("updated_at") @updatedAt

  record Record @relation(fields: [recordId], references: [id])
  medication Medication @relation(fields: [medicationId], references: [id])

  @@map("prescriptions")
}

//Rafael
model Medication {
  id Int @id @default( autoincrement() )
  createdAt DateTime @map("created_at") @default( now() )
  updatedAt DateTime @map("updated_at") @updatedAt

  name String
  quantity String
  type String
  expiresAt DateTime  @map("expires_at")

  movements Movement[] 
  prescriptions Prescription[]
  
  @@map("medications")

}

//Rafael
model Movement {
  id Int @id @default( autoincrement() )
  createdAt DateTime  @map("created_at") @default( now() )
  updatedAt DateTime @map("updated_at") @updatedAt

  medicationId Int @map("medication_id")
  userId Int @map("user_id")
  date DateTime
  quantity String 
  movementType MovementType @map("movement_type")

  // FK -> Medication
  medication Medication @relation(fields: [medicationId], references: [id])
  user User @relation(fields: [userId], references:[id])

  @@map("movements")
}

enum MovementType {
  INBOUND
  OUTBOUND
}



