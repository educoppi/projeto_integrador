// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema
 
 
//FK -> User
// variavel Model(nome da tabela mas no singular) relação(FK, PK, ação)
//ex: clientId Int @map("client_id")
// client User @relation(fields: [clientId], references: [id], onDelete: Cascade)
 
// quem carrega o 1 tem o vetor
// habits Habit []
 
generator client {
  provider = "prisma-client-js"
}
 
datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}
 
//Eduardo Coppi
model User {
 
  id Int @id @default(autoincrement())
 
  name String
  lastName String @map("last_name")
  password String
  cpf String @unique
  phone String
  email String @unique
  role Role
 
  createdAt DateTime  @map("created_at") @default(now())
  updatedAt DateTime @map("update_at") @updatedAt
 
  recordsAsUser Record[] @relation("recordUser")
  recordsAsDoctor Record[] @relation("recordDoctor")
 
  movementsAsUser   Movement[] @relation("MovementUser")
  movementsAsDoctor Movement[] @relation("MovementDoctor")
 
  
  @@map("users")
}
 
enum Role {
  RECEPCIONIST
  TRIAGE
  DOCTOR
  NURSE
  PHARMACY
  PATIENT
}
//Eduardo Lombardo
model Record {
  id Int @id @default( autoincrement() )
  userId Int @map("user_id")
  patientId Int @map("patient_id")
  appointmentDate DateTime @map("appointment_date")
  anotacao String
  createdAt DateTime @map("created_at") @default( now() )
  updatedAt DateTime @map("updated_at") @updatedAt
 
  user User @relation("recordUser", fields: [userId], references: [id])
  patient User @relation("recordDoctor", fields: [patientId], references: [id])
 
  exam Exam?
  prescription Prescription?
 
  @@map("records")
}
 
//Eduardo Lombardo
model Exam {
  id Int @id @default( autoincrement() )
  recordId Int @map("record_id") @unique
  date DateTime
  type String
  result String
  observation String
 
  createdAt DateTime @map("created_at") @default( now() )
  updatedAt DateTime @map("updated_at") @updatedAt
 
  record Record @relation(fields: [recordId], references: [id])
 
  @@map("exams")
}
 
//Sara
model Prescription {
  id Int @id @default( autoincrement() )
  recordId Int @map("record_id") @unique
  medicationId Int @map("medication_id") 
  quantity Int
  observation String
 
  createdAt DateTime @map("created_at") @default( now() )
  updatedAt DateTime @map("updated_at") @updatedAt
 
  record Record @relation(fields: [recordId], references: [id])
  medication Medication @relation(fields: [medicationId], references: [id])
 
  @@map("prescriptions")
}
 
//Rafael
model Medication {
  id Int @id @default( autoincrement() )
  createdAt DateTime @map("created_at") @default( now() )
  updatedAt DateTime @map("updated_at") @updatedAt
 
  name String
  dosage String
  quantity Int
  type String
  expiresAt DateTime  @map("expires_at")
 
  movements Movement[] 
  prescriptions Prescription[]
  @@map("medications")
 
}
 
//Rafael
model Movement {
  id Int @id @default( autoincrement() )
  createdAt DateTime  @map("created_at") @default( now() )
  updatedAt DateTime @map("updated_at") @updatedAt
 
  medicationId Int @map("medication_id")
  userId Int @map("user_id")
  doctorId Int @map("doctor_id")
  date DateTime
  quantity Int 
  movementType MovementType @map("movement_type")
 
  // FK -> Medication
  medication Medication @relation(fields: [medicationId], references: [id])
  user User @relation("MovementUser", fields: [userId], references:[id])
  doctor User @relation("MovementDoctor", fields: [doctorId], references:[id])
 
 
  @@map("movements")
}
 
enum MovementType {
  INBOUND
  OUTBOUND
}